{"version":3,"file":"static/js/577.d7af44c3.chunk.js","mappings":"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","sources":["components/header.js","constants/paths.js","hooks/use-user.js","components/profile/header.js","components/profile/photos.js","components/profile/index.js","pages/profile.js","services/firebase.js"],"sourcesContent":["import { useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport FirebaseContext from '../context/firebase';\nimport UserContext from '../context/user';\nimport * as ROUTES from '../constants/routes';\nimport { DEFAULT_IMAGE_PATH } from '../constants/paths';\nimport useUser from '../hooks/use-user';\n\nexport default function Header() {\n   const { user: loggedInUser } = useContext(UserContext);\n   const { user } = useUser(loggedInUser?.uid);\n   const { firebase } = useContext(FirebaseContext);\n   const history = useHistory();\n\n   //console.log({ user })\n\n   return (\n      <header className=\"h-16 bg-white border-b border-gray-primary mb-8\">\n         <div className=\"container mx-auto max-w-screen-lg h-full\">\n            <div className=\"flex justify-between h-full\">\n               <div className=\"text-gray-700 text-center flex items-center align-items cursor-pointer\">\n                  <h1 className=\"flex justify-center w-full\">\n                     <Link to={ROUTES.DASHBOARD} aria-label=\"Instagram logo\">\n                        <img src=\"/images/logo.png\" alt=\"Instagram\" className=\"mt-2 w-6/12\" />\n                     </Link>\n                  </h1>\n               </div>\n               <div className=\"text-gray-700 text-center flex items-center align-items\">\n                  {loggedInUser ? (\n                     <>\n                        <Link to={ROUTES.DASHBOARD} aria-label=\"Dashboard\">\n                           <svg\n                              className=\"w-8 mr-6 text-black-light cursor-pointer\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              fill=\"none\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                           >\n                              <path\n                                 strokeLinecap=\"round\"\n                                 strokeLinejoin=\"round\"\n                                 strokeWidth={2}\n                                 d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\n                              />\n                           </svg>\n                        </Link>\n\n                        <button\n                           type=\"button\"\n                           title=\"Sign Out\"\n                           onClick={() => {\n                              firebase.auth().signOut();\n                              history.push(ROUTES.LOGIN);\n                           }}\n                           //Sign out with enter key\n                           onKeyDown={(event) => {\n                              if (event.key === 'Enter') {\n                                 firebase.auth().signOut();\n                                 history.push(ROUTES.LOGIN);\n                              }\n                           }}\n                        >\n                           <svg\n                              className=\"w-8 mr-6 text-black-light cursor-pointer\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              fill=\"none\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                           >\n                              <path\n                                 strokeLinecap=\"round\"\n                                 strokeLinejoin=\"round\"\n                                 strokeWidth={2}\n                                 d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\"\n                              />\n                           </svg>\n                        </button>\n                        {user && (\n                           <div className=\"flex items-center cursor-pointer\">\n                              <Link to={`/p/${user?.username}`}>\n                                 <img\n                                    className=\"rounded-full h-8 w-8 flex\"\n                                    src={`/images/avatars/${user?.username}.jpg`}\n                                    // src={`/images/avatars/steve.jpg`}\n                                    alt={`${user?.username} profile`}\n                                    onError={(e) => {\n                                       e.target.src = DEFAULT_IMAGE_PATH;\n                                    }}\n                                 />\n                              </Link>\n                           </div>\n                        )}\n                     </>\n                  ) : (\n                     <>\n                        <Link to={ROUTES.LOGIN}>\n                           <button\n                              type=\"button\"\n                              className=\"bg-blue-medium font-bold text-sm rounded text-white w-20 h-8\"\n                           >\n                              Log In\n                           </button>\n                        </Link>\n                        <Link to={ROUTES.SIGN_UP}>\n                           <button\n                              type=\"button\"\n                              className=\"font-bold text-sm rounded text-blue-medium w-20 h-8\"\n                           >\n                              Sign Up\n                           </button>\n                        </Link>\n                     </>\n                  )}\n               </div>\n            </div>\n         </div>\n      </header>\n   );\n}\n","export const DEFAULT_IMAGE_PATH = '/images/avatars/default.png';\n","import { useState, useEffect } from 'react';\nimport { getUserByUserId } from '../services/firebase';\n\nexport default function useUser(userId) {\n   const [activeUser, setActiveUser] = useState();\n\n   useEffect(() => {\n      async function getUserObjByUserId(userId) {\n         const [user] = await getUserByUserId(userId);\n         setActiveUser(user || {});\n      }\n\n      if (userId) {\n         getUserObjByUserId(userId);\n      }\n   }, [userId]);\n\n   return { user: activeUser, setActiveUser };\n}\n","/* eslint-disable jsx-a11y/img-redundant-alt */\nimport { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\nimport useUser from '../../hooks/use-user';\nimport { isUserFollowingProfile, toggleFollow } from '../../services/firebase';\nimport UserContext from '../../context/user';\nimport { DEFAULT_IMAGE_PATH } from '../../constants/paths';\n\nexport default function Header({\n   photosCount,\n   followerCount,\n   setFollowerCount,\n   profile: {\n      docId: profileDocId,\n      userId: profileUserId,\n      fullName,\n      followers,\n      following,\n      username: profileUsername\n   }\n}) {\n\n   //console.log(profileUserId)\n\n   const { user: loggedInUser } = useContext(UserContext);\n   const { user } = useUser(loggedInUser?.uid);\n   const [isFollowingProfile, setIsFollowingProfile] = useState(null);\n   const activeBtnFollow = user?.username && user?.username !== profileUsername;\n\n   const handleToggleFollow = async () => {\n      setIsFollowingProfile((isFollowingProfile) => !isFollowingProfile);\n      setFollowerCount({\n         followerCount: isFollowingProfile ? followerCount - 1 : followerCount + 1\n      });\n      await toggleFollow(isFollowingProfile, user.docId, profileDocId, profileUserId, user.userId);\n   };\n\n   console.log(isFollowingProfile)\n\n   useEffect(() => {\n      const isLoggedInUserFollowingProfile = async () => {\n         const isFollowing = await isUserFollowingProfile(user.username, profileUserId);\n         setIsFollowingProfile(!!isFollowing);\n      };\n\n      if (user?.username && profileUserId) {\n         isLoggedInUserFollowingProfile();\n      }\n   }, [user?.username, profileUserId]);\n\n   return (\n      <div className=\"grid grid-cols-3 gap-4 justify-between mx-auto max-w-screen-lg\">\n         <div className=\"container flex justify-center items-center\">\n            {profileUsername ? (\n               <img\n                  className=\"rounded-full h-40 w-40 flex\"\n                  alt={`${fullName} profile picture`}\n                  src={`/images/avatars/${profileUsername}.jpg`}\n                  onError={(e) => {\n                     e.target.src = DEFAULT_IMAGE_PATH;\n                  }}\n               />\n            ) : (\n               <Skeleton circle height={150} width={150} count={1} />\n            )}\n         </div>\n         <div className=\"flex items-center justify-center flex-col col-span-2\">\n            <div className=\"container flex items-center\">\n               <p className=\"text-2xl mr-4\">{profileUsername}</p>\n               {activeBtnFollow && isFollowingProfile === null ? (\n                  <Skeleton count={1} width={80} height={32} />\n               ) : (\n                  activeBtnFollow && (\n                     <button\n                        className=\"bg-blue-medium font-bold text-sm rounded text-white w-20 h-8\"\n                        type=\"button\"\n                        onClick={handleToggleFollow}\n                        onKeyDown={(event) => {\n                           if (event.key === 'Enter') {\n                              handleToggleFollow();\n                           }\n                        }}\n                     >\n                        {isFollowingProfile ? 'Unfollow' : 'Follow'}\n                     </button>\n                  )\n               )}\n            </div>\n            <div className=\"container flex mt-4\">\n               {!followers || !following ? (\n                  <Skeleton count={1} width={677} height={24} />\n               ) : (\n                  <>\n                     <p className=\"mr-10\">\n                        <span className=\"font-bold\">{photosCount}</span> photos\n                     </p>\n                     <p className=\"mr-10\">\n                        <span className=\"font-bold\">{followerCount}</span>\n                        {` `}\n                        {followerCount === 1 ? `follower` : `followers`}\n                     </p>\n                     <p className=\"mr-10\">\n                        <span className=\"font-bold\">{following?.length}</span> following\n                     </p>\n                  </>\n               )}\n            </div>\n            <div className=\"container mt-4\">\n               <p className=\"font-medium\">{!fullName ? <Skeleton count={1} height={24} /> : fullName}</p>\n            </div>\n         </div>\n      </div>\n   );\n}\n\nHeader.propTypes = {\n   photosCount: PropTypes.number.isRequired,\n   followerCount: PropTypes.number.isRequired,\n   setFollowerCount: PropTypes.func.isRequired,\n   profile: PropTypes.shape({\n      docId: PropTypes.string,\n      userId: PropTypes.string,\n      fullName: PropTypes.string,\n      username: PropTypes.string,\n      followers: PropTypes.array,\n      following: PropTypes.array\n   }).isRequired\n};\n","/* eslint-disable no-nested-ternary */\nimport PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\n\nexport default function Photos({ photos }) {\n  return (\n    <div className=\"h-16 border-t border-gray-primary mt-12 pt-4\">\n      <div className=\"grid grid-cols-3 gap-8 mt-4 mb-12\">\n        {!photos\n          ? new Array(12).fill(0).map((_, i) => <Skeleton key={i} width={320} height={400} />)\n          : photos.length > 0\n          ? photos.map((photo) => (\n              <div key={photo.docId} className=\"relative group\">\n                <img src={photo.imageSrc} alt={photo.caption} />\n\n                <div className=\"absolute bottom-0 left-0 bg-gray-200 z-10 w-full justify-evenly items-center h-full bg-black-faded group-hover:flex hidden\">\n                  <p className=\"flex items-center text-white font-bold\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"currentColor\"\n                      className=\"w-8 mr-4\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                    {photo.likes.length}\n                  </p>\n\n                  <p className=\"flex items-center text-white font-bold\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"currentColor\"\n                      className=\"w-8 mr-4\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                    {photo.comments.length}\n                  </p>\n                </div>\n              </div>\n            ))\n          : null}\n      </div>\n\n      {!photos || (photos.length === 0 && <p className=\"text-center text-2xl\">No Posts Yet</p>)}\n    </div>\n  );\n}\n\nPhotos.propTypes = {\n  photos: PropTypes.array\n};\n","import { useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from './header';\nimport Photos from './photos';\nimport { getUserPhotosByUserId } from '../../services/firebase';\n\nexport default function Profile({ user }) {\n\n   //console.log(user)\n\n   const reducer = (state, newState) => ({ ...state, ...newState });\n\n\n   const initialState = {\n      profile: {},\n      photosCollection: null,\n      followerCount: 0\n   };\n\n   const [{ profile, photosCollection, followerCount }, dispatch] = useReducer(\n      reducer,\n      initialState\n   );\n\n\n\n   useEffect(() => {\n      async function getProfileInfoAndPhotos() {\n         const photos = await getUserPhotosByUserId(user.userId);\n         dispatch({ profile: user, photosCollection: photos, followerCount: user.followers.length });\n      }\n      getProfileInfoAndPhotos();\n   }, [user.username]);\n\n   return (\n      <>\n         <Header\n            photosCount={photosCollection ? photosCollection.length : 0}\n            profile={profile}\n            followerCount={followerCount}\n            setFollowerCount={dispatch}\n         />\n         <Photos photos={photosCollection} />\n      </>\n   );\n}\n\nProfile.propTypes = {\n   user: PropTypes.shape({\n      dateCreated: PropTypes.number,\n      emailAddress: PropTypes.string,\n      followers: PropTypes.array,\n      following: PropTypes.array,\n      fullName: PropTypes.string,\n      userId: PropTypes.string,\n      username: PropTypes.string\n   })\n};\n","import { useParams, useHistory } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getUserByUsername } from '../services/firebase';\nimport * as ROUTES from '../constants/routes';\nimport Header from '../components/header';\nimport UserProfile from '../components/profile';\n\nexport default function Profile() {\n   const { username } = useParams();\n   const [user, setUser] = useState(null);\n   const history = useHistory();\n\n\n\n   //we catch the user by username from params\n   useEffect(() => {\n      async function checkUserExists() {\n         const [user] = await getUserByUsername(username);\n\n         if (user?.userId) {\n            setUser(user);\n         } else {\n            history.push(ROUTES.NOT_FOUND);\n         }\n      }\n\n      checkUserExists();\n   }, [username, history]);\n\n   return user?.username ? (\n      <div className=\"bg-gray-background\">\n         <Header />\n         <div className=\"mx-auto max-w-screen-lg\">\n            <UserProfile user={user} />\n         </div>\n      </div>\n   ) : null;\n}\n","import { firebase, FieldValue } from '../lib/firebase';\n\nexport async function doesUsernameExist(username) {\n   const result = await firebase\n      .firestore()\n      .collection('users')\n      .where('username', '==', username.toLowerCase())\n      .get();\n\n   return result.docs.length > 0;\n}\n\nexport async function getUserByUsername(username) {\n   const result = await firebase\n      .firestore()\n      .collection('users')\n      .where('username', '==', username.toLowerCase())\n      .get();\n\n   return result.docs.map((item) => ({\n      ...item.data(),\n      docId: item.id\n   }));\n}\n\n// get user from the firestore where userId === userId (passed from the auth)\nexport async function getUserByUserId(userId) {\n   const result = await firebase.firestore().collection('users').where('userId', '==', userId).get();\n   const user = result.docs.map((item) => ({\n      ...item.data(),\n      docId: item.id\n   }));\n\n   return user;\n}\n\n// check all conditions before limit results\nexport async function getSuggestedProfiles(userId, following) {\n   let query = firebase.firestore().collection('users');\n\n   if (following.length > 0) {\n      query = query.where('userId', 'not-in', [...following, userId]);\n   } else {\n      query = query.where('userId', '!=', userId);\n   }\n   const result = await query.limit(10).get();\n\n   const profiles = result.docs.map((user) => ({\n      ...user.data(), //only data for not followed user(doesn't contain the id of the doc in Firestore)\n      docId: user.id // with this we add the docId plus in the profile data\n   }));\n   //console.log(profiles)\n   return profiles;\n}\n\nexport async function updateLoggedInUserFollowing(\n   loggedInUserDocId, // currently logged in user document id (karl's profile)\n   profileId, // the user that karl requests to follow\n   isFollowingProfile // true/false (am i currently following this person?)\n) {\n   return firebase\n      .firestore()\n      .collection('users')\n      .doc(loggedInUserDocId)\n      .update({\n         following: isFollowingProfile ?\n            FieldValue.arrayRemove(profileId) :\n            FieldValue.arrayUnion(profileId)\n      });\n}\n\nexport async function updateFollowedUserFollowers(\n   profileDocId, // currently logged in user document id (karl's profile)\n   loggedInUserDocId, // the user that karl requests to follow\n   isFollowingProfile // true/false (am i currently following this person?)\n) {\n   return firebase\n      .firestore()\n      .collection('users')\n      .doc(profileDocId)\n      .update({\n         followers: isFollowingProfile ?\n            FieldValue.arrayRemove(loggedInUserDocId) :\n            FieldValue.arrayUnion(loggedInUserDocId)\n      });\n}\n\nexport async function getPhotos(userId, following) {\n   // [5,4,2] => following\n   const result = await firebase\n      .firestore()\n      .collection('photos')\n      .where('userId', 'in', following)\n      .get();\n\n   const userFollowedPhotos = result.docs.map((photo) => ({\n      ...photo.data(),\n      docId: photo.id\n   }));\n\n   const photosWithUserDetails = await Promise.all(\n      userFollowedPhotos.map(async (photo) => {\n         let userLikedPhoto = false; // we create new prop here \n         if (photo.likes.includes(userId)) {\n            userLikedPhoto = true;\n         }\n\n         // photo.userId = 2 //we catch the username from user cause photo doesn't have username field\n         const user = await getUserByUserId(photo.userId);\n\n         // raphael\n         const { username } = user[0];\n         return { username, ...photo, userLikedPhoto };//we return 3 data together(we spread for combining them)\n      })\n\n   );\n\n   return photosWithUserDetails;\n}\n\nexport async function getUserPhotosByUserId(userId) {\n   const result = await firebase\n      .firestore()\n      .collection('photos')\n      .where('userId', '==', userId)\n      .get();\n\n   const photos = result.docs.map((photo) => ({\n      ...photo.data(),\n      docId: photo.id\n   }));\n   return photos;\n}\n\nexport async function isUserFollowingProfile(loggedInUserUsername, profileUserId) {\n   const result = await firebase\n      .firestore()\n      .collection('users')\n      .where('username', '==', loggedInUserUsername) // karl (active logged in user)\n      .where('following', 'array-contains', profileUserId)\n      .get();\n\n   const [response = {}] = result.docs.map((item) => ({\n      ...item.data(),\n      docId: item.id\n   }));\n\n   return response.userId;\n}\n\nexport async function toggleFollow(\n   isFollowingProfile,\n   activeUserDocId,\n   profileDocId,\n   profileUserId,\n   followingUserId\n) {\n   // 1st param: karl's doc id\n   // 2nd param: raphael's user id\n   // 3rd param: is the user following this profile? e.g. does karl follow raphael? (true/false)\n   await updateLoggedInUserFollowing(activeUserDocId, profileUserId, isFollowingProfile);\n\n   // 1st param: karl's user id\n   // 2nd param: raphael's doc id\n   // 3rd param: is the user following this profile? e.g. does karl follow raphael? (true/false)\n   await updateFollowedUserFollowers(profileDocId, followingUserId, isFollowingProfile);\n}\n"],"names":["Header","loggedInUser","useContext","UserContext","user","useUser","uid","firebase","FirebaseContext","history","useHistory","className","to","ROUTES","src","alt","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","type","title","onClick","auth","signOut","push","onKeyDown","event","key","username","onError","e","target","DEFAULT_IMAGE_PATH","userId","useState","activeUser","setActiveUser","useEffect","getUserByUserId","getUserObjByUserId","photosCount","followerCount","setFollowerCount","profile","profileDocId","docId","profileUserId","fullName","followers","following","profileUsername","isFollowingProfile","setIsFollowingProfile","activeBtnFollow","handleToggleFollow","toggleFollow","console","log","isLoggedInUserFollowingProfile","isUserFollowingProfile","isFollowing","circle","height","width","count","length","Photos","photos","map","photo","imageSrc","caption","fillRule","clipRule","likes","comments","Array","_","i","Profile","useReducer","state","newState","photosCollection","dispatch","getUserPhotosByUserId","getProfileInfoAndPhotos","useParams","setUser","getUserByUsername","checkUserExists","doesUsernameExist","collection","where","toLowerCase","get","result","docs","item","data","id","getSuggestedProfiles","query","limit","profiles","updateLoggedInUserFollowing","loggedInUserDocId","profileId","doc","update","FieldValue","updateFollowedUserFollowers","getPhotos","userFollowedPhotos","Promise","all","userLikedPhoto","includes","photosWithUserDetails","loggedInUserUsername","response","activeUserDocId","followingUserId"],"sourceRoot":""}